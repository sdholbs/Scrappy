	const instructions = '<p class="scrappy_sidebar">Welcome to Scrappy the web scraper!\
	Using Scrappy, you can gather data from the web in three short steps. </p>\
	<p class="scrappy_sidebar"><b>Step 1: Find a page -</b><div/> Navigate to a website that you wish to scrape and then click continue.';
	const link_inst = '<p class="scrappy_sidebar"><b>Step 3: Get URLs to scrape -</b><div/> Go to a page that lists many links to pages analagous to your examples.</p>';
	const ready_inst = '<p class="scrappy_sidebar">Awesome! You\'re ready to scrape!</p>';
	const content_inst ='<p class="scrappy_sidebar"><b>Required:</b> Then please click on the on content that you wish to scrape.</p>';
	
self.on('message', function(status){
	if(status == '0' || status == '1' || status == '2'||status == '3'||status=='4') scrappyInit(status);
	else if(status == 'disable') disableAddon(false);
	//message = scrape_progress_52
	else if(status.substring(0,16) == 'scrape_progress_') updateScrapeProgress(status);
	else alert(status);
});

	var ID_NAME = 'scrappy_id';
	var CLASS_GOOD = 'scrappy_highlight_good';
	var CLASS_SUGGESTION = 'scrappy_highlight_suggest';
	var CLASS_TRANSPARENT = 'scrappy_transparent';
	var CLASS_OPAQUE = 'scrappy_opaque';
	var CLASS_INACTIVE_HOVER = 'scrappy_hover';
	var counter = 0;
	var tableCounter = 0;
	var DEBUG = false;
	var WELCOME = 0;
	var LINK_MODE = 2;
	var BUSY_SCRAPING = 4;
	var CONTENT_MODE = 1;
	var CONFIRM = 3;
	var currMode = 0;
	var TABLE_TYPE = "table";
	var DEFAULT_TYPE = "default";
	
	//Main Init - sidebar function
	function scrappyInit(status) 
	{			
		currMode = parseInt(status);
		//TODO: use status to take the correct action (o/c)
		openSidebar();				
	}
	
	//When the user clicks to close the sidebar
	function disableAddon(calledFromContentScript)
	{
		console.log('[scrappy.js] disabledAddon (calledFromContentScript = ' + calledFromContentScript + ')');
		
		//Removes elements and handlers
		$("#scrappySB").remove();
		disableSuggest();
		closeProgressBar();
		if(calledFromContentScript) 
			sendMessage('','disabledAddon');
		
	}
	
	//Creates the sidebar and adds it to the DOM
	function openSidebar()
	{			
		createSidebar();		
		addHandlersToSidebarElements();
		prepareDOMForParsing();
	}
	
	function createSidebar()
	{
		if($("#scrappySB").length>0){
			$("#scrappySB").css("display","block");
			$('#scrappyMinDiv').css('display','none');
			return;
		}
		//First time opening:
		$('body').append('<div id="scrappySB" class=scrappy_sidebar></div>');
		$('#scrappySB').append('<div id="scrappyTitleBar" class="scrappy_topBar scrappy_sidebar">\
		<span style="color:#FFF;float:left;padding:2px;" id="scrappy_title" class="scrappy_sidebar">Scrappy</span></div>');
		$('#scrappySB').css('zIndex', 2147483640);
		$("#scrappySB").append("<div id='scrappyMenu' class='scrappy_sidebar'></div>");
		//$("#scrappySB").append("<div id='scrappy_back' style='float:left;margin-left:5px;' class='scrappy_button scrappy_sidebar'>&lt;&lt; Back</div>");
		$("#scrappy_back").hide();
		
		//Example URL textbox
		$("#scrappyMenu").append('<form id="scrappy_example_URL" action=""><p class="scrappy_sidebar"><b>Step 2: Template Creation</b><div/>Optionally paste the URL of another similar page you want to scrape to help improve suggestions for scrapable fields.</p> <div style="font-size:8px" class="scrappy_sidebar">Type this URL below and hit enter:</div><input type="text"/></form>');
		
		//Instructions
		$("#scrappyMenu").append('<div id="scrappy_inst" class="scrappy_sidebar">'+instructions+'</div>');
		
		//Continue Button
		$("#scrappySB").append("<div id='scrappy_ok-button' style='float:right;margin-right:5px;' class='scrappy_button scrappy_sidebar'>Continue &gt;&gt;</div>");
		
		//'Use this page' button
		$("#scrappyMenu").append("<div id='scrappy_link-ready' class='scrappy_button scrappy_sidebar'>Use this page</div>");
		
		//Elements that are selected
		$("#scrappyMenu").append("<div id='scrappySelectedElemsDiv' style='display:none' class='scrappy_sidebar'><p class='scrappy_sidebar'>Selected Elements:</p><ul id='scrappySelectedElems'></ul></div>");
		//File type checkboxes
		$("#scrappyMenu").append('<form id="scrappy_file_type">What output\
		file type would you like?<div/>\
		<input type="checkbox" name="scrappy_file_type" value="csv" checked="true" />CSV<div/>\
		<input type="checkbox" name="scrappy_file_type" value="json"/>JSON</form>');
		normalButtonInit("scrappy_back");
		urlTextAreaInit();
		normalButtonInit("scrappy_ok-button");
		normalButtonInit("scrappy_link-ready");
		$("#scrappySB").append("<div style='display:none;' class='scrappy_button scrappy_sidebar'> <a class='scrappy_sidebar' style='display:none'>Scrape</a></div>");
		display_state();
	}
	
	function addProgressBar()
	{	
		console.log('');
		console.log('[addProgressBar] adding progress bar!');
		console.log('');
		
		//Load stylesheet
		$('head').append( $('<link rel="stylesheet" type="text/css" />').attr('href', 'http://stanford.edu/~nikil/progressBar.css') );
		
		//Create Div
		$('body').append('<div id="scrape_blackout"></div>');
		$('body').append('<div id="scrape_progress"><span id="progress_text">Scraping...</span><div id="scrappy_progressbar"></div></div>');
		
		//Background blackout
		$('#scrape_blackout').css("top","0px");
		$('#scrape_blackout').css("left","0px");
		$('#scrape_blackout').css("width","100%");
		$('#scrape_blackout').css("height","100%");
		$('#scrape_blackout').css("background-color","black");
		$('#scrape_blackout').css("opacity",0.7);
		$('#scrape_blackout').css("position","fixed");
		$('#scrape_blackout').css("margin","0px");
		$('#scrape_blackout').css("zIndex",2147483645);
		
		//Progress Box
		$('#scrape_progress').css("position","fixed");	
		$('#scrape_progress').css("top","100px");
		$('#scrape_progress').css("left","300px");
		$('#scrape_progress').css("height","80px");
		$('#scrape_progress').css("width","500px");
		$('#scrape_progress').css("zIndex",2147483646);
		$('#scrape_progress').css("background-color","white");
		$('#scrape_progress').css("text-align","center");
		$('#scrape_progress').css("border","1px solid black");
		
		//Progress Bar			
		$('#scrappy_progressbar').css("margin","auto");
		$('#scrappy_progressbar').css("height","40px");
		$('#scrappy_progressbar').css("width","400px");
		$('#scrappy_progressbar').css("position","relative");
		$('#scrappy_progressbar').css("zIndex",2147483647);		

		//Add Progressbar
		$("#scrappy_progressbar").progressbar({
			value: 0
		});
		
		/*
		//For debugging
		$('body').append('<div id="progressBarBtn" class="scrappy_sidebar" style="width:100px;height:100px;background-color:red"click</div>');
		$('#progressBarBtn').click(function(){
			console.log('clicked progress bar button');
			console.log('right after print click');
			updateProgressBar(Math.floor(Math.random()*100));			
			console.log('after clicking progress bar button');
		});*/
	}
	
	//updates progress
	function updateScrapeProgress(status)
	{
		//scrape_progress_18
		percentComplete = status.substring(16);
		if(percentComplete < 0 || percentComplete > 100) error();
		else updateProgressBar(parseInt(percentComplete));
	}
	
	//Takes in an int
	function updateProgressBar(percentComplete)
	{
		console.log('');
		console.log('[updateProgressBar] updating progress bar, value = ' + percentComplete);
		console.log('');		
		$("#scrappy_progressbar").progressbar("value",percentComplete);
	}
	
	function closeProgressBar()
	{
		$('#scrape_progress').remove();
	}
	
	
	function prepareDOMForParsing(){
		
		var objects = document.evaluate("//body//*", document, null, XPathResult.ANY_TYPE, null);
		var thisObj = objects.iterateNext();
		
		var toEdit = new Array();
		var i = 0;
		
		while (thisObj) {
			
			var elemIndex = $(thisObj).html().trim().indexOf("<");
			
			if(elemIndex > 0){
				toEdit[i] = thisObj;
				i++;
			}
  			thisObj = objects.iterateNext();
		}
		
		
		for(var i = 0; i < toEdit.length; i++){
			var obj = toEdit[i];
			var elemIndex = $(obj).html().indexOf("<");
			var newHtml = "<span>" + $(obj).html().substring(0, elemIndex) + "</span>" + $(obj).html().substring(elemIndex);
			$(obj).html(newHtml);
		}		
		
	}
	
	function getLinkSuggestions(){
		var holders = $("table, ul");
			
		var keep = $(holders).find("a");
		
		return keep;
	}
	
	
	function getSuggestions(allTypes, allTypesExceptTable)
	{
		//Get div, table, spans without children
		var elements = $(allTypes);
		var keep = [];
		
		//Filter each element
		
			//Tables - keep tables that dont have other tables in them
			//IDEA TO DO: if the table only has one div / span in each td
			var tables = $(elements).filter("table");			
			for(var i=0; i < tables.size(); i++)
			{
				if(!isStructuralTable(tables[i])) 
					keep[keep.length] = tables[i];
			}
						
			//Divs - Keep divs with no children div, spans, or tables AND is not in a <td> that we are keeping
			var divs = $(elements).filter(allTypesExceptTable);
			for(var i=0; i < divs.size(); i++)
			{
				var elem = divs[i];
			
				//if this div, span has children, skip
				if(hasChildElements(elem,allTypes)) continue;
					
				//And if we have already kept a table that contains this div
				//skip
				if(keptParentTable(elem,keep)) continue;
				
				//otherwise keep
				if($(elem).text().trim().length == 0) continue;
			
				keep[keep.length] = elem;

			}
			
		var url = null;
		if($('#saved_suggest_URL').is(":visible")){
			url = $('#saved_suggest_URL').attr('href');
		}
		if(url != null){
			var suggested = [];
		
			var other = getPage(url);
			
			var j = 0;
			for(var i=0; i < keep.length; i++){
				var elem = keep[i];
				//alert($(elem).text());
				if(other.indexOf($(elem).text()) == -1){
					suggested[j] = elem;
					j++;
				}
			}
			
			
			keep = suggested;
		}
		
		
		return keep;



		/*
			
		var objects = document.evaluate("//body//*", document, null, XPathResult.ANY_TYPE, null);
		var thisObj = objects.iterateNext();
			
		var alertText = 'Items matching XPath Query in this document are:\n';
		var suggested = new Array();
	
		var index = 0;
		while (thisObj) {
			var processedText = getObjectText(thisObj);
			
			var oddCount = getOddCharCount(processedText);
			var longestWord = longestWordLength(processedText);

			if(processedText.length > 0){
				if(other.indexOf(processedText) == -1 && oddCount < 4 && longestWord < 20){
					suggested[index] = thisObj; 
					index++;
  					alertText += processedText + '\n';
  				}
			}
				
  			thisObj = objects.iterateNext();
		}
			
		return suggested;
		*/
			
	}
	
		
		function hasChildElements(root, childType)
		{
			return $(root).find(childType).size() > 0;
		}
		
		//Two hueristics - if it contains a table
		//if it contains a div in a div
		function isStructuralTable(table)
		{
			if( $(table).find("table").size() > 0) return true;
			if( $(table).find("div > div").size() > 0) return true;
			
			return false;
		}
		
		//Checks if the element has a parent which is a table in kept
		function keptParentTable(element,kept)
		{
			var parentTables = $(element).parents("table");
			var keptParentTables = $(kept).filter(parentTables).size();			
			return keptParentTables > 0;
		}
		
		//Is the selection an element marked for scraping?
		function isSelectedGood(element)
		{
			return $(element).hasClass(CLASS_GOOD);
		}
		
		//Is the selection an element we suggested user scrape?
		function isSelectedSuggestion(element)
		{
			return $(element).hasClass(CLASS_SUGGESTION);
		}
		
		function addSelectionToUI(title, element){
			/*if(element.length>20)
				summaryString = string.substring(0, 20)+"...";
			else summaryString = element;*/
			$("#scrappySelectedElems").append("<li class='scrappy_sidebar'><span class='scrappy_sidebar scrappy_selected'>"+title+"</span></li>");
			
			//+": "+ summaryString+"</div><br/>");
		}
		//Prompts the user to add an id to the element, adds id
		function addScrappyId(element)
		{		
			var id = getIdFromUser();
			//for right now just use a number name
			if (id != null){
				addSelectionToUI(id, element)
				$(element).attr(ID_NAME,counter);
				$(element).attr('title', "Field Name: " + id);
			}
			return id;
		}
		
		//Removes the id from element and 
		function removeScrappyId(element)
		{
			$(element).removeAttr(ID_NAME);
			$(element).attr('title', "Element Not Selected");
		}
		
		function getIdFromUser()
		{
			var name = prompt("Name this Data Field");
			return name;
		}
		
		//Checks whether the element has been suggested or cliced on by the user (active)
		function isActiveElement(element)
		{
			return $(element).hasClass(CLASS_GOOD) || $(element).hasClass(CLASS_SUGGESTION);
		}
		
		function getElementText(element)
		{
			return $(element).text();
		}
		
		function saveContentTemplate()
		{
			var objects = Array();
			var i = 0;
			$("[" + ID_NAME + "]").each( function() {
				var object = {};
				var name = $(this).attr('title').split(":")[1].trim();
				object['name'] = name;
				var path = getElementXPath($(this)[0]);
				object['path'] = path;
				if($(this)[0].tagName == "TABLE"){
					object['type'] = TABLE_TYPE;
					object['cols'] = $(this).attr('cols');
				} else {
					object['type'] = DEFAULT_TYPE;
				}
				objects[i] = object;
				i++;
 			});
			if(objects.length == 0)
			{
				alert('Please choose some elements on the page to scrape');
				return false;
			}
			
			sendMessage(objects,'content');
			return true;
		}
		
		/* syncronously loads another page to serve as a template */
		function getPage(url)
		{
			/*
			jQuery.ajax({
         		url:	url,
         		success:function(result) {
                          	return "HTML: " + result;
                  		},
         		async:   false,
         		type: "GET",
         		dataType: "html"
         	});
         	*/
         	var xmlhttp = new XMLHttpRequest();
         	xmlhttp.open("GET", url, false);
			xmlhttp.setRequestHeader("Content-type", "text/html");
			xmlhttp.setRequestHeader("Connection","Keep-Alive");
			xmlhttp.send();
			return xmlhttp.responseText;
		}
		
		/* Taken from firebug */
		function getElementXPath (element)
		{
    		if (element && element.id) {
        		return '//*[@id="' + element.id + '"]';
    		} else {
        		return this.getElementTreeXPath(element);
        	}
		}

		/* Taken from firebug */
		function getElementTreeXPath (element)
		{
    		var paths = [];

    		// Use nodeName (instead of localName) so namespace prefix is included (if any).
    		for (; element && element.nodeType == 1; element = element.parentNode)
    		{
        		var index = 0;
        		for (var sibling = element.previousSibling; sibling; sibling = sibling.previousSibling)
        		{
            	// Ignore document type declaration.
            		if (sibling.nodeType == Node.DOCUMENT_TYPE_NODE)
                		continue;

            		if (sibling.nodeName == element.nodeName)
                		++index;
        		}

        		var tagName = element.nodeName.toLowerCase();
        		var pathIndex = (index ? "[" + (index+1) + "]" : "");
        		paths.splice(0, 0, tagName + pathIndex);
    		}

    		return paths.length ? "/" + paths.join("/") : null;
    		
		}



/*
 ----------------------------------------------------------
Functions to start content template mode
----------------------------------------------------------
 */


		function startContentTemplateMode(){
			$("#scrappySelectedElemsDiv").show();
			$("#scrappySB").height("auto");
			$("a").attr("onclick", "return false");
			$("#scrappy_title").html("Scrappy - Template Creation");
			var suggestionTypesExceptTable = "div, span, p, a, h1, h2, dd";
			var suggestionTypes = suggestionTypesExceptTable + ", table";
			var extraTypes = ", h3, h4, h5, h6, dt";
			var allTypes = suggestionTypes + extraTypes;
			var allTypesExceptTable = suggestionTypesExceptTable + extraTypes;
			
			var suggestedElements = getSuggestions(suggestionTypes, suggestionTypesExceptTable);
			//Hack for sidebar
			suggestedElements = $(suggestedElements).not('.scrappy_sidebar');
			
			//----------------Prechosen Elements--------------
			$(suggestedElements).addClass(CLASS_SUGGESTION + ' ' + CLASS_TRANSPARENT);
			
			$(suggestedElements).attr('title',"Element Not Selected");
			
			//----------------All Elements Hover--------------
			//Can't use hover! Use -> over/ out!
			$(allTypes).not('.scrappy_sidebar').mouseover(
				function(event) {
					if(isActiveElement(this)) $(this).addClass(CLASS_OPAQUE);
					else $(this).addClass(CLASS_INACTIVE_HOVER);
					
					//Stop event from bubbling up
					event.stopPropagation();					
				});
			$(allTypes).not('.scrappy_sidebar').mouseout(
				function(event) {
					if(isActiveElement(this)) $(this).removeClass(CLASS_OPAQUE);
					else $(this).removeClass(CLASS_INACTIVE_HOVER);
					
					//Stop event from bubbling up
					event.stopPropagation();					
				}
			);
			
			//TODO: outer div-> clear inner
			
			//On a click to a div, table, span switch the highlight color
			$(allTypes).not('.scrappy_sidebar').click(function(event) {
      	//for if we ever want to use the annotator
      	//sendMessage(document.location.toString(),'show');
					//Case 1 - Currently: Selected as good, Now: disselect
					if(isSelectedGood(this))
					{
						
						$(this).removeClass(CLASS_GOOD);
						removeScrappyId(this);
						//Stop the event from registering a click on the outer div
						event.stopPropagation();
					
						console.log('click case 1');
						console.log(this);
					}
				
					//Case 2 - Currently: Selected as maybe, Now: select as good
					else if(isSelectedSuggestion(this))
					{
				
						if($(this)[0].tagName == "TABLE") {
							var selected = selectTable(this);
							if(selected != null){
								$(this).removeClass(CLASS_SUGGESTION);
								$(this).addClass(CLASS_GOOD);
							}

						} else {
							var name = addScrappyId(this);
							//Highlight as good if named
							if(name != null){
								$(this).removeClass(CLASS_SUGGESTION);
								$(this).addClass(CLASS_GOOD);
							}
						}
						
						//Don't bubble click up to enclosing divs
						event.stopPropagation();
					
						console.log('click case 2');
						console.log(this);
					}
				
					//Case 3 - Not currently selected
					//Similar to case 2, but now remove different div
					else 
					{
						if($(this)[0].tagName == "TABLE") {
							var selected = selectTable(this);
							if(selected != null){
								$(this).addClass(CLASS_GOOD);
							}

						} else {
							var name = addScrappyId(this);
					
							if(name != null){
								//Highlight as good
								$(this).addClass(CLASS_GOOD);
							}
						}
					
						//Don't bubble click up to outer divs
						event.stopPropagation();
					
						//Click fires mouseover event
						$(this).removeClass(CLASS_INACTIVE_HOVER);							
					
						console.log('click case 3');
						console.log(this);
						
					}
				
				
			});
			
		}		
		
		function normalButtonInit(id){
			$('#'+id).css("cursor","pointer");
			$("#"+id).mouseover(function() {
   	 		$("#"+id).css("background-color","#383838");
   	 		$("#"+id).css("color","#FFFFFF");
  		}).mouseout(function(){
  			$("#"+id).css("color","#585858");
   			$("#"+id).css("background-color","#D8D8D8");
  		});
		}
		function urlTextAreaInit(){
			$("#scrappy_example_URL").submit(function(){
				url=$("#scrappy_example_URL input:first").val();
				abbrev = $("#scrappy_example_URL input:first").val();
				start = 0;
				if(url.indexOf("http://www.", 0)>=0) start=11;
				else if(url.indexOf("http://", 0)>=0) start=7;
				console.log('[urlTextAreaInit]' + start);
				if(abbrev.length-start>40) abbrev=abbrev.substring(start,40)+"...";
				$("#scrappy_example_URL").html("Helper URL:<br\><a id='saved_suggest_URL' class='scrappy_sidebar' href='"+url+"'>"+abbrev+"</a>");
				disableSuggest();
				startContentTemplateMode();
				return false;
			});
		}


		function toggleButtonInit(id){
			$("#"+id).mouseover(function() {
   	 		$("#"+id).css("color","#FFF");
  		}).mouseout(function(){
   			$("#"+id).css("color","#C0C0C0");
  		});
  		$('#'+id).css("cursor","pointer");
		}

		function initCloseButton(){
			$("#scrappyTitleBar").append('<div id="scrappyClose" title="Close" class="scrappy_sidebar toggle_button">x</div>');
			$("#scrappyClose").click(function(){
				disableAddon(true);						
			});
			toggleButtonInit("scrappyClose")
		}
		function initMinButton(){
			$("#scrappyTitleBar").append('<div id="scrappyMin" title="Minimize Scrappy" class="scrappy_sidebar toggle_button">_ </div>');
			$("#scrappyMin").click(function(){
				$('#scrappySB').hide();
				$('#scrappyMinDiv').show();
			});
			toggleButtonInit("scrappyMin");
		}
		function initMaxButton(){
			$('body').append('<div id="scrappyMinDiv" title="Maximize Scrappy" style="color:#C0C0C0;display:none;" class="scrappy_sidebar scrappy_topBar">+</div>');
			$("#scrappyMinDiv").click(function(){
				$('#scrappySB').show();
				$('#scrappyMinDiv').hide();
			});
			toggleButtonInit("scrappyMinDiv");
		}


		function selectTable(table){
			var columnCount = getColumnCount(table);
			
			var colNames = Array();
			
			var tableName = getTableNameFromUser();
			if(tableName != null){
				$(table).attr(ID_NAME,counter);
				if(tableName.length > 0){
					$(table).attr('title',"Field Name: " + tableName);
				} else {
					$(table).attr('title',"Field Name: Table " + tableCounter);
					tableCounter++;
				}
			} else {
				return null;
			}
			
			for (var i = 0; i < columnCount; i++){
				highlightTableColumn(table, i);
				var colName = getColNameFromUser(i+1);
				removeColumnHighlight(table, i);
				if(colName != null){
					if(colName.length > 0){
						colNames[i] = colName;
					} else {
						colNames[i] = "Column " + (i+1);
					}
				} else {
					return null;
				}
			}
			
			if(tableName != null){
				$(table).attr('cols', JSON.stringify(colNames));
			}
			addSelectionToUI(tableName);
			return tableName;
			
		}
		
		function highlightTableColumn(table, col){
			var tr = $(table).find("tr");
			for(var i = 0; i < tr.length; i++){
				var td = $(tr[i]).find("td");
				if(td[col] != null){
					$(td[col]).addClass(CLASS_GOOD);
				}
			}
		}
		
		function removeColumnHighlight(table, col){
			var tr = $(table).find("tr");
			for(var i = 0; i < tr.length; i++){
				var td = $(tr[i]).find("td");
				if(td[col] != null){
					$(td[col]).removeClass(CLASS_GOOD);
				}
			}
		}
		
		function getColNameFromUser(colNum)
		{
			var colName = prompt("Name column " + colNum + ":");
			return colName;
		}
		
		function getTableNameFromUser()
		{
			var name = prompt("Name the table:");
			return name;
		}
		
		function getColumnCount(table){
			var max = 0;
			var tr = $(table).find("tr");
			for(var i = 0; i < tr.length; i++){
				var td = $(tr[i]).find("td").length;
				if(td > max) {
					max = td;
				}
			}
			
			return max;
		}
		
		function display_state(){
			$("#scrappy_file_type").hide();
			$("#scrappySelectedElemsDiv").hide();
			$("#scrappy_link-ready").hide();
			$("#scrappy_example_URL").hide();
			$("#scrappy_back").show();
			$("#scrappy_inst").show();
			if(currMode == WELCOME){
					$("#scrappy_title").html("Scrappy - Welcome!");
					$("#scrappy_inst").html(instructions);
					$("#scrappy_back").hide();					
				}
			else if(currMode == CONTENT_MODE)
				{
					$("#scrappy_title").html("Scrappy - Template Creation");
					$("#scrappy_inst").html(content_inst);
					$("#scrappy_example_URL").show();
					startContentTemplateMode();	
				}
				else if (currMode == LINK_MODE)
				{
					disableSuggest();
					$("#scrappy_link-ready").show();
					
					$("#scrappy_title").html("Scrappy - Link Selection");
					$("#scrappy_ok-button").html("Continue &gt;&gt;");
					$("#scrappy_inst").html(link_inst);
					//Now selection mode is started by link-ready button
					//startLinkSelectionMode();
				}
				else if (currMode == CONFIRM)
				{
					$("#scrappy_title").html("Scrappy - Ready to Scrape");
					$("#scrappy_file_type").show();
					$("#scrappy_ok-button").html("Scrape!");
					$("#scrappy_inst").html(ready_inst);
					
				}
				else if(currMode == BUSY_SCRAPING)
				{
					$("#scrappyMenu").html("<p class='scrappy_sidebar'>Busy scraping...</p>");
				}
				else
				{
					alert('error');
					error();
				}
		}
		
		function commit_data(){
				
				if(currMode == WELCOME) currMode++;
				else if(currMode == CONTENT_MODE)
				{
					success = saveContentTemplate();		
					if(success){
						currMode++;
					}else return;
				}
				else if (currMode == LINK_MODE)
				{
					success = saveLinkData();
					if(success){
						currMode++;
					} else return;
				}
				else if (currMode == CONFIRM)
				{
					file_type_str = "";
					$("#scrappy_file_type input:checked").each(function() {
						file_type_str+=$(this).val()+" ";
					});
     			if(file_type_str ==""){
     				alert("No file type selected");
     				return false;
     			}
					addProgressBar();
					sendMessage(file_type_str,'scrape');					
					//alert("Scraping...this may take a couple minutes");
					currMode++;
				}
				else
				{
					alert('error');
					error();
				}
				display_state();
		}
		function disableSuggest(){
				$("*").not('.scrappy_sidebar').unbind();
				$("a").attr("onclick", "return true");
				$("."+CLASS_GOOD).removeClass(CLASS_GOOD);
				$("."+CLASS_SUGGESTION).removeClass(CLASS_SUGGESTION);
				$("."+CLASS_TRANSPARENT).removeClass(CLASS_TRANSPARENT);
				$("."+CLASS_OPAQUE).removeClass(CLASS_OPAQUE);
				$("."+CLASS_INACTIVE_HOVER).removeClass(CLASS_INACTIVE_HOVER);
		}
		/* creates click handlers for the sidebar */
		function addHandlersToSidebarElements()
		{

			//Click Handlers
			initMaxButton();
			initMinButton();
			initCloseButton();
			$("#scrappy_back").click(function(){
				currMode--;
				disableSuggest();
				display_state();
				sendMessage(currMode.toString(),'state');
			});
			$("#scrappy_ok-button").click(function(){
				commit_data();
				sendMessage(currMode.toString(),'state');
			});
			
			$("#scrape-button").click(function(){
				sendMessage('','scrape');
			});
			
			$("#scrappy_link-ready").click(function(){
				startLinkSelectionMode();
			});
		}
		
		
		/* wrap up a message and send it to main.js */
		function sendMessage(data, type)
		{
			
			//Message object
			var message = {};
			message['data'] = data;
			message['type'] = type;
			message = [message];  	//hack for eval
			
			//Convert to a string, automatically escapes special chars
			var jsonString = JSON.stringify(message);
			
			self.postMessage(jsonString);  //post message to main.js
		}
		

/*
 ----------------------------------------------------------
 Link Selector Code
 ----------------------------------------------------------
 */
 
 function getSimilarLinks(link){
 	var xpath = getElementXPath($(link)[0]);
	xpath = xpath.replace(/\[([0-9]+)\]/g,"");
	var objects = document.evaluate(xpath, document, null, XPathResult.ANY_TYPE, null);
	var thisObj = objects.iterateNext();
	var selected = new Array();
	var i = 0;
	while (thisObj) {
		selected[i] = thisObj;
		i++;
		thisObj = objects.iterateNext();
	}
	
	return selected;
			
 }
 
 function highlightSimilarLinks(link)
		{
			var selected = getSimilarLinks(link);
			
			for(var i = 0; i < selected.length; i++){
				var obj = selected[i];
				$(obj).removeClass(CLASS_SUGGESTION);
				$(obj).addClass(CLASS_GOOD);
			}
		}
		
		function saveLinkData(){
			var links = new Array();
			var i = 0;
			$("." + CLASS_GOOD).each( function() {
				var link = {};
				var url = $(this).attr("href");
				if(url.indexOf("http") != 0){
					var hn = window.location.hostname;
					url = "http://" + hn + url;
				}
				link['url'] = url;
				link['name'] = $(this).text();
				links[i] = link;
				i++;
 			});
 			 			
 			if(links.length == 0)
			{
				alert('Please choose some links to scrape');
				return false;
			}
			
			sendMessage(links,'link');
			return true;

		}
		
		function startLinkSelectionMode(){
			var allTypes = "a";
			$("#scrappy_link-ready").remove()
			$("#scrappyMenu").append('<div id="scrappy_link-ready" style="color:green" class="scrappy_sidebar">\
			<p class="scrappy_sidebar">\
			<b>Ready for link selection!</b></p>\
			<p class="scrappy_sidebar">Select links to pages you want to scrape</p>');
			$("a").attr("onclick", "return false");
			
			//var suggestedElements = getLinkSuggestions();
			
			//Hack for sidebar
			//suggestedElements = $(suggestedElements).not('.scrappy_sidebar');
			
			//----------------Prechosen Elements--------------
			//$(suggestedElements).addClass(CLASS_SUGGESTION + ' ' + CLASS_TRANSPARENT);
			
			//$(suggestedElements).attr('title',"Element Not Selected");
			
			//----------------All Elements Hover--------------
			//Can't use hover! Use -> over/ out!
			$(allTypes).not('.scrappy_sidebar').mouseover(
				function(event) {
					var sim = getSimilarLinks(this);
					if(isActiveElement(this)) {
						$(this).addClass(CLASS_OPAQUE);
						for(var i = 0; i < sim.length; i++){
							var obj = sim[i];
							if(!$(obj).hasClass(CLASS_GOOD)){
								$(obj).addClass(CLASS_OPAQUE);
							}
						}
					} else {
						$(this).addClass(CLASS_INACTIVE_HOVER);
						for(var i = 0; i < sim.length; i++){
							var obj = sim[i];
							if(!$(obj).hasClass(CLASS_GOOD)){
								$(obj).addClass(CLASS_INACTIVE_HOVER);
							}
						}
					}
					
					//Stop event from bubbling up
					event.stopPropagation();					
				});
			$(allTypes).not('.scrappy_sidebar').mouseout(
				function(event) {
					var sim = getSimilarLinks(this);
					if(isActiveElement(this)) {
						$(this).removeClass(CLASS_OPAQUE);
						for(var i = 0; i < sim.length; i++){
							var obj = sim[i];
							$(obj).removeClass(CLASS_OPAQUE);
						}
					} else {
						$(this).removeClass(CLASS_INACTIVE_HOVER);
						for(var i = 0; i < sim.length; i++){
							var obj = sim[i];
							$(obj).removeClass(CLASS_INACTIVE_HOVER);
						}
					}
					
					//Stop event from bubbling up
					event.stopPropagation();					
				}
			);
			
			//TODO: outer div-> clear inner
			
			//On a click to a div, table, span switch the highlight color
			$(allTypes).not('.scrappy_sidebar').click(function(event) {
				
				//Case 1 - Currently: Selected as good, Now: disselect
				if(isSelectedGood(this))
				{
					$(this).removeClass(CLASS_GOOD);
					//removeScrappyId(this);
					//Stop the event from registering a click on the outer div
					event.stopPropagation();
					console.log('click case 1');
					console.log(this);
				}
				
				//Case 2 - Currently: Selected as maybe, Now: select as good
				else if(isSelectedSuggestion(this))
				{
				
					//Highlight as good
					$(this).removeClass(CLASS_SUGGESTION);
					$(this).addClass(CLASS_GOOD);
					highlightSimilarLinks(this);

					//Name
					//addScrappyId(this);
					
					//Don't bubble click up to enclosing divs
					event.stopPropagation();
					
					console.log('click case 2');
					console.log(this);
				}
				
				//Case 3 - Not currently selected
				//Similar to case 2, but now remove different div
				else 
				{
					//Highlight as good
					$(this).addClass(CLASS_GOOD);
					var sim = getSimilarLinks(this);
					for(var i = 0; i < sim.length; i++){
						var obj = sim[i];
						$(obj).removeClass(CLASS_INACTIVE_HOVER);
						$(obj).removeClass(CLASS_OPAQUE);
					}

					//addScrappyId(this);
					
					highlightSimilarLinks(this);
					//Don't bubble click up to outer divs
					event.stopPropagation();
					
					//Click fires mouseover event
					$(this).removeClass(CLASS_INACTIVE_HOVER);							
					
					console.log('click case 3');
					console.log(this);
				}
			});
		}
		
		
/*
 ----------------------------------------------------------
 Text Processing Functions for Suggestions
 ----------------------------------------------------------
 */
		
		function htmlEntityDecode(str) {
  			var ta = content.document.createElement("textarea");
  			ta.innerHTML = str.replace(/</g,"&lt;").replace(/>/g,"&gt;");
  			return ta.value;
		}
		
		function getOddCharCount (str) {
			var count = str.split(/&|"|;|=/g).length - 1;
			return count;
		}
		
		function longestWordLength(str) {
			var max = 0;
			var processed = str.split(/\s+/g);
			for(var index in processed){
				snippet = processed[index];
				if(snippet.length > max){
					max = snippet.length;
				}
			}
			return max;
		}
		
		function getObjectText(obj){
			var text = obj.innerHTML;

			var elemIndex = text.indexOf("<");
			if(elemIndex != -1){
				text = text.substring(0, elemIndex);
			}
			
			var processedText = this.htmlEntityDecode(text).replace(/^\s+|\s+$/g,"");
			
			return processedText;
		}